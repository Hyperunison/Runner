"""
    Unison agent API

    API for opensource nextflow runner agent. A federation node  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from auto_api_client.api_client import ApiClient, Endpoint as _Endpoint
from auto_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from auto_api_client.model.add_run_log_chunk_request import AddRunLogChunkRequest
from auto_api_client.model.runner_message import RunnerMessage
from auto_api_client.model.types_map import TypesMap


class AgentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_run_log_chunk_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/log-chunk',
                'operation_id': 'add_run_log_chunk',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'add_run_log_chunk_request',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\da-f]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'add_run_log_chunk_request':
                        (AddRunLogChunkRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'add_run_log_chunk_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_next_task_endpoint = _Endpoint(
            settings={
                'response_type': (RunnerMessage,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/next-task',
                'operation_id': 'get_next_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                ],
                'required': [
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\da-f]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_types_map_endpoint = _Endpoint(
            settings={
                'response_type': (TypesMap,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/next-run/types',
                'operation_id': 'get_types_map',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                ],
                'required': [
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\da-f]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_process_logs_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/process/logs',
                'operation_id': 'set_process_logs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'logs',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\da-f]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'logs':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                    'logs': 'logs',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'logs': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_run_status_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/status',
                'operation_id': 'set_run_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'status',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\da-f]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                    'status': 'status',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_process_item_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/process',
                'operation_id': 'update_process_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\da-f]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def add_run_log_chunk(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """add_run_log_chunk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_run_log_chunk(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            add_run_log_chunk_request (AddRunLogChunkRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.add_run_log_chunk_endpoint.call_with_http_info(**kwargs)

    def get_next_task(
        self,
        version,
        token,
        **kwargs
    ):
        """get_next_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_next_task(version, token, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RunnerMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.get_next_task_endpoint.call_with_http_info(**kwargs)

    def get_types_map(
        self,
        version,
        token,
        **kwargs
    ):
        """get_types_map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_types_map(version, token, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TypesMap
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.get_types_map_endpoint.call_with_http_info(**kwargs)

    def set_process_logs(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """set_process_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_process_logs(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            logs (str): Logs of process. [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_process_logs_endpoint.call_with_http_info(**kwargs)

    def set_run_status(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """set_run_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_run_status(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            status (str): New run status. [optional] if omitted the server will use the default value of "success"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_run_status_endpoint.call_with_http_info(**kwargs)

    def update_process_item(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """update_process_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_process_item(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.update_process_item_endpoint.call_with_http_info(**kwargs)

