"""
    Unison agent API

    API for opensource nextflow runner agent. A federation node  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from auto_api_client.api_client import ApiClient, Endpoint as _Endpoint
from auto_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from auto_api_client.model.add_run_log_chunk_request import AddRunLogChunkRequest
from auto_api_client.model.biobank_data_table import BiobankDataTable
from auto_api_client.model.get_mappings_request import GetMappingsRequest
from auto_api_client.model.mapping_resolve_response import MappingResolveResponse
from auto_api_client.model.runner_message import RunnerMessage
from auto_api_client.model.set_cohort_definition_aggregation_request import SetCohortDefinitionAggregationRequest
from auto_api_client.model.set_job_state_request import SetJobStateRequest
from auto_api_client.model.set_process_logs_request import SetProcessLogsRequest
from auto_api_client.model.set_sql_query_for_cohort_api_request_request import SetSQLQueryForCohortApiRequestRequest
from auto_api_client.model.set_table_column_freequent_values_request import SetTableColumnFreequentValuesRequest
from auto_api_client.model.set_table_column_stats_request import SetTableColumnStatsRequest
from auto_api_client.model.set_table_info_request import SetTableInfoRequest
from auto_api_client.model.set_table_stats_request import SetTableStatsRequest
from auto_api_client.model.set_tables_list_request import SetTablesListRequest
from auto_api_client.model.set_task_error_request import SetTaskErrorRequest
from auto_api_client.model.types_map import TypesMap


class AgentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.accept_task_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/task/{id}',
                'operation_id': 'accept_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'id',
                ],
                'required': [
                    'version',
                    'token',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'id': 'id',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.add_run_log_chunk_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/log-chunk',
                'operation_id': 'add_run_log_chunk',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'add_run_log_chunk_request',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'add_run_log_chunk_request':
                        (AddRunLogChunkRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'add_run_log_chunk_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.block_task_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/task/{id}/block',
                'operation_id': 'block_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'id',
                    'runner_instance',
                ],
                'required': [
                    'version',
                    'token',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'id':
                        (str,),
                    'runner_instance':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'id': 'id',
                    'runner_instance': 'runner_instance',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'id': 'path',
                    'runner_instance': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_agent_id_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/agent-id',
                'operation_id': 'get_agent_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                ],
                'required': [
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_app_agent_updateprocessitem_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/process',
                'operation_id': 'get_app_agent_updateprocessitem',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_mappings_endpoint = _Endpoint(
            settings={
                'response_type': ([MappingResolveResponse],),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/mapping/resolve/{key}',
                'operation_id': 'get_mappings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'key',
                    'get_mappings_request',
                ],
                'required': [
                    'version',
                    'token',
                    'key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'key':
                        (str,),
                    'get_mappings_request':
                        (GetMappingsRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'key': 'key',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'key': 'path',
                    'get_mappings_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_next_task_endpoint = _Endpoint(
            settings={
                'response_type': (RunnerMessage,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/task',
                'operation_id': 'get_next_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                ],
                'required': [
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_types_map_endpoint = _Endpoint(
            settings={
                'response_type': (TypesMap,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/next-run/types',
                'operation_id': 'get_types_map',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                ],
                'required': [
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_car_status_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/car/{id}/status',
                'operation_id': 'set_car_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'pid',
                    'status',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'pid':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                    'pid': 'pid',
                    'status': 'status',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'pid': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_cohort_definition_aggregation_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/cohort/aggregation/{key}',
                'operation_id': 'set_cohort_definition_aggregation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'key',
                    'channel',
                    'raw_only',
                    'set_cohort_definition_aggregation_request',
                ],
                'required': [
                    'version',
                    'token',
                    'key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'key':
                        (str,),
                    'channel':
                        (str,),
                    'raw_only':
                        (str,),
                    'set_cohort_definition_aggregation_request':
                        (SetCohortDefinitionAggregationRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'key': 'key',
                    'channel': 'channel',
                    'raw_only': 'rawOnly',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'key': 'path',
                    'channel': 'query',
                    'raw_only': 'query',
                    'set_cohort_definition_aggregation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_error_for_cohort_api_request_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/cohort/{id}/error',
                'operation_id': 'set_error_for_cohort_api_request',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'id',
                    'set_task_error_request',
                ],
                'required': [
                    'version',
                    'token',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'id':
                        (str,),
                    'set_task_error_request':
                        (SetTaskErrorRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'id': 'id',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'id': 'path',
                    'set_task_error_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_job_state_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/job/runner-message/{runId}/set-state',
                'operation_id': 'set_job_state',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'run_id',
                    'set_job_state_request',
                ],
                'required': [
                    'version',
                    'token',
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'run_id':
                        (str,),
                    'set_job_state_request':
                        (SetJobStateRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'run_id': 'runId',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'run_id': 'path',
                    'set_job_state_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_kill_result_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/kill-result',
                'operation_id': 'set_kill_result',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'channel',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'channel':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                    'channel': 'channel',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'channel': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_process_logs_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/process/{processId}/logs',
                'operation_id': 'set_process_logs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'process_id',
                    'version',
                    'token',
                    'channel',
                    'set_process_logs_request',
                ],
                'required': [
                    'process_id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'process_id',
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('process_id',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'process_id':
                        (str,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'channel':
                        (str,),
                    'set_process_logs_request':
                        (SetProcessLogsRequest,),
                },
                'attribute_map': {
                    'process_id': 'processId',
                    'version': 'version',
                    'token': 'token',
                    'channel': 'channel',
                },
                'location_map': {
                    'process_id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'channel': 'query',
                    'set_process_logs_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_run_status_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/status',
                'operation_id': 'set_run_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                    'status',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                    'status': 'status',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_sql_query_for_cohort_api_request_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/cohort/{id}/sql-query',
                'operation_id': 'set_sql_query_for_cohort_api_request',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'id',
                    'set_sql_query_for_cohort_api_request_request',
                ],
                'required': [
                    'version',
                    'token',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'id':
                        (str,),
                    'set_sql_query_for_cohort_api_request_request':
                        (SetSQLQueryForCohortApiRequestRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'id': 'id',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'id': 'path',
                    'set_sql_query_for_cohort_api_request_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_table_column_freequent_values_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/ucdm/tables/{table}/columns/{column}/values',
                'operation_id': 'set_table_column_freequent_values',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'table',
                    'column',
                    'set_table_column_freequent_values_request',
                ],
                'required': [
                    'version',
                    'token',
                    'table',
                    'column',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                    'table',
                    'column',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                    ('table',): {

                        'regex': {
                            'pattern': r'[\w.]+',  # noqa: E501
                        },
                    },
                    ('column',): {

                        'regex': {
                            'pattern': r'[\w.-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'table':
                        (str,),
                    'column':
                        (str,),
                    'set_table_column_freequent_values_request':
                        (SetTableColumnFreequentValuesRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'table': 'table',
                    'column': 'column',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'table': 'path',
                    'column': 'path',
                    'set_table_column_freequent_values_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_table_column_stats_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/ucdm/tables/{table}/columns/{column}',
                'operation_id': 'set_table_column_stats',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'table',
                    'column',
                    'set_table_column_stats_request',
                ],
                'required': [
                    'version',
                    'token',
                    'table',
                    'column',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                    'table',
                    'column',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                    ('table',): {

                        'regex': {
                            'pattern': r'[\w.]+',  # noqa: E501
                        },
                    },
                    ('column',): {

                        'regex': {
                            'pattern': r'[\w.-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'table':
                        (str,),
                    'column':
                        (str,),
                    'set_table_column_stats_request':
                        (SetTableColumnStatsRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'table': 'table',
                    'column': 'column',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'table': 'path',
                    'column': 'path',
                    'set_table_column_stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_table_info_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/ucdm/tables/{table}',
                'operation_id': 'set_table_info',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'table',
                    'set_table_info_request',
                ],
                'required': [
                    'version',
                    'token',
                    'table',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                    'table',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                    ('table',): {

                        'regex': {
                            'pattern': r'[\w.]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'table':
                        (str,),
                    'set_table_info_request':
                        (SetTableInfoRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'table': 'table',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'table': 'path',
                    'set_table_info_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_table_stats_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/ucdm/tables/{table}/columns',
                'operation_id': 'set_table_stats',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'table',
                    'set_table_stats_request',
                ],
                'required': [
                    'version',
                    'token',
                    'table',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                    'table',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                    ('table',): {

                        'regex': {
                            'pattern': r'[\w.]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'table':
                        (str,),
                    'set_table_stats_request':
                        (SetTableStatsRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'table': 'table',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'table': 'path',
                    'set_table_stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_tables_list_endpoint = _Endpoint(
            settings={
                'response_type': ([BiobankDataTable],),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/ucdm/tables',
                'operation_id': 'set_tables_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'set_tables_list_request',
                ],
                'required': [
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'set_tables_list_request':
                        (SetTablesListRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'set_tables_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_task_error_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/task/{id}/error',
                'operation_id': 'set_task_error',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version',
                    'token',
                    'id',
                    'set_task_error_request',
                ],
                'required': [
                    'version',
                    'token',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version':
                        (str,),
                    'token':
                        (str,),
                    'id':
                        (str,),
                    'set_task_error_request':
                        (SetTaskErrorRequest,),
                },
                'attribute_map': {
                    'version': 'version',
                    'token': 'token',
                    'id': 'id',
                },
                'location_map': {
                    'version': 'path',
                    'token': 'path',
                    'id': 'path',
                    'set_task_error_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_process_item_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/api/agent/v{version}/{token}/run/{id}/process',
                'operation_id': 'update_process_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'version',
                    'token',
                ],
                'required': [
                    'id',
                    'version',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                    'token',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'regex': {
                            'pattern': r'[\d.]+',  # noqa: E501
                        },
                    },
                    ('token',): {

                        'regex': {
                            'pattern': r'[\w-]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'version':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'version': 'version',
                    'token': 'token',
                },
                'location_map': {
                    'id': 'path',
                    'version': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def accept_task(
        self,
        version,
        token,
        id,
        **kwargs
    ):
        """accept_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_task(version, token, id, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['id'] = \
            id
        return self.accept_task_endpoint.call_with_http_info(**kwargs)

    def add_run_log_chunk(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """add_run_log_chunk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_run_log_chunk(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            add_run_log_chunk_request (AddRunLogChunkRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.add_run_log_chunk_endpoint.call_with_http_info(**kwargs)

    def block_task(
        self,
        version,
        token,
        id,
        **kwargs
    ):
        """block_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.block_task(version, token, id, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            id (str):

        Keyword Args:
            runner_instance (str): uid of runner instance. [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['id'] = \
            id
        return self.block_task_endpoint.call_with_http_info(**kwargs)

    def get_agent_id(
        self,
        version,
        token,
        **kwargs
    ):
        """get_agent_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_agent_id(version, token, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.get_agent_id_endpoint.call_with_http_info(**kwargs)

    def get_app_agent_updateprocessitem(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """get_app_agent_updateprocessitem  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_agent_updateprocessitem(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.get_app_agent_updateprocessitem_endpoint.call_with_http_info(**kwargs)

    def get_mappings(
        self,
        version,
        token,
        key,
        **kwargs
    ):
        """get_mappings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mappings(version, token, key, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            key (str):

        Keyword Args:
            get_mappings_request (GetMappingsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [MappingResolveResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['key'] = \
            key
        return self.get_mappings_endpoint.call_with_http_info(**kwargs)

    def get_next_task(
        self,
        version,
        token,
        **kwargs
    ):
        """get_next_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_next_task(version, token, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RunnerMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.get_next_task_endpoint.call_with_http_info(**kwargs)

    def get_types_map(
        self,
        version,
        token,
        **kwargs
    ):
        """get_types_map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_types_map(version, token, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TypesMap
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.get_types_map_endpoint.call_with_http_info(**kwargs)

    def set_car_status(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """set_car_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_car_status(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Cohort API Request ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            pid (str): New pid. [optional] if omitted the server will use the default value of ""
            status (str): New Cohort API Request status. [optional] if omitted the server will use the default value of "success"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_car_status_endpoint.call_with_http_info(**kwargs)

    def set_cohort_definition_aggregation(
        self,
        version,
        token,
        key,
        **kwargs
    ):
        """set_cohort_definition_aggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_cohort_definition_aggregation(version, token, key, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            key (str):

        Keyword Args:
            channel (str): WS channel to send reply. [optional]
            raw_only (str): Is raw only, converting to UPDM will be skipped. [optional]
            set_cohort_definition_aggregation_request (SetCohortDefinitionAggregationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['key'] = \
            key
        return self.set_cohort_definition_aggregation_endpoint.call_with_http_info(**kwargs)

    def set_error_for_cohort_api_request(
        self,
        version,
        token,
        id,
        **kwargs
    ):
        """set_error_for_cohort_api_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_error_for_cohort_api_request(version, token, id, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            id (str):

        Keyword Args:
            set_task_error_request (SetTaskErrorRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['id'] = \
            id
        return self.set_error_for_cohort_api_request_endpoint.call_with_http_info(**kwargs)

    def set_job_state(
        self,
        version,
        token,
        run_id,
        **kwargs
    ):
        """set_job_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_job_state(version, token, run_id, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            run_id (str):

        Keyword Args:
            set_job_state_request (SetJobStateRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['run_id'] = \
            run_id
        return self.set_job_state_endpoint.call_with_http_info(**kwargs)

    def set_kill_result(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """set_kill_result  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_kill_result(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            channel (str): WS channel to send reply. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_kill_result_endpoint.call_with_http_info(**kwargs)

    def set_process_logs(
        self,
        process_id,
        version,
        token,
        **kwargs
    ):
        """set_process_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_process_logs(process_id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            process_id (str): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            channel (str): WS channel to send reply. [optional]
            set_process_logs_request (SetProcessLogsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['process_id'] = \
            process_id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_process_logs_endpoint.call_with_http_info(**kwargs)

    def set_run_status(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """set_run_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_run_status(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            status (str): New run status. [optional] if omitted the server will use the default value of "success"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_run_status_endpoint.call_with_http_info(**kwargs)

    def set_sql_query_for_cohort_api_request(
        self,
        version,
        token,
        id,
        **kwargs
    ):
        """set_sql_query_for_cohort_api_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_sql_query_for_cohort_api_request(version, token, id, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            id (str):

        Keyword Args:
            set_sql_query_for_cohort_api_request_request (SetSQLQueryForCohortApiRequestRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['id'] = \
            id
        return self.set_sql_query_for_cohort_api_request_endpoint.call_with_http_info(**kwargs)

    def set_table_column_freequent_values(
        self,
        version,
        token,
        table,
        column,
        **kwargs
    ):
        """set_table_column_freequent_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_table_column_freequent_values(version, token, table, column, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            table (str):
            column (str):

        Keyword Args:
            set_table_column_freequent_values_request (SetTableColumnFreequentValuesRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['table'] = \
            table
        kwargs['column'] = \
            column
        return self.set_table_column_freequent_values_endpoint.call_with_http_info(**kwargs)

    def set_table_column_stats(
        self,
        version,
        token,
        table,
        column,
        **kwargs
    ):
        """set_table_column_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_table_column_stats(version, token, table, column, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            table (str):
            column (str):

        Keyword Args:
            set_table_column_stats_request (SetTableColumnStatsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['table'] = \
            table
        kwargs['column'] = \
            column
        return self.set_table_column_stats_endpoint.call_with_http_info(**kwargs)

    def set_table_info(
        self,
        version,
        token,
        table,
        **kwargs
    ):
        """set_table_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_table_info(version, token, table, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            table (str):

        Keyword Args:
            set_table_info_request (SetTableInfoRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['table'] = \
            table
        return self.set_table_info_endpoint.call_with_http_info(**kwargs)

    def set_table_stats(
        self,
        version,
        token,
        table,
        **kwargs
    ):
        """set_table_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_table_stats(version, token, table, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            table (str):

        Keyword Args:
            set_table_stats_request (SetTableStatsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['table'] = \
            table
        return self.set_table_stats_endpoint.call_with_http_info(**kwargs)

    def set_tables_list(
        self,
        version,
        token,
        **kwargs
    ):
        """set_tables_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_tables_list(version, token, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):

        Keyword Args:
            set_tables_list_request (SetTablesListRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [BiobankDataTable]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.set_tables_list_endpoint.call_with_http_info(**kwargs)

    def set_task_error(
        self,
        version,
        token,
        id,
        **kwargs
    ):
        """set_task_error  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_task_error(version, token, id, async_req=True)
        >>> result = thread.get()

        Args:
            version (str):
            token (str):
            id (str):

        Keyword Args:
            set_task_error_request (SetTaskErrorRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        kwargs['id'] = \
            id
        return self.set_task_error_endpoint.call_with_http_info(**kwargs)

    def update_process_item(
        self,
        id,
        version,
        token,
        **kwargs
    ):
        """update_process_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_process_item(id, version, token, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Run ID, example: 1234. It may be taken from /next-task API method
            version (str):
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['version'] = \
            version
        kwargs['token'] = \
            token
        return self.update_process_item_endpoint.call_with_http_info(**kwargs)

