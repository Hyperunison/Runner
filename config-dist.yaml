# You may use syntax:
# - ARG("some_cli_arg") - to pass CLI var to config
# - ENV("some_cli_arg") - to pass ENV var to config
# For example:
#```yaml
# api_url: ENV("api_url")
#```

api_version: 1.0
api_url: "https://api.hyperunison.com"
agent_token: "<copy it from your biobank>"
idle_delay: 5.0                         # delay between requests to Hyperunison backend to get new tasks
check_runs_status_interval: 30.0
sentry_dsn: ""                          # Generate sentryDSN in https://sentry.io/ and use in here to monitor errors

# may be 0 or 1. If 1 - export files will be uploaded to Unison S3 storage and available for download from Unison platform
# if 0 - no private data will be exported
allow_private_upload_data_to_unison: 0

log:
  level: 20 # 10 - debug, 50 - critical. I recommend level=20 for most users
  filename: "" #filename or empty for stdout

# endpoint to SQL database with patients phenoenotypic data
phenotypic_db:
  # SQLAlchemy format DSN. More details here: https://workshop-python.readthedocs.io/database/sqlalchemy/connection-dsn.html
  # examples:
  # dsn: "postgresql+psycopg2://myusername:mypassword@myhost:5432/mydatabase"
  # dsn: "postgresql+psycopg2://myusername:mypassword@myhost:5432/mydatabase?sslmode=require"
  dsn: postgresql+psycopg2://***:***@***:***/***
  min_count: 3                                      # Minimum number of unique patients with list of properties to allow system to export this properties

# You may describe data forbidden to access by Runner
data_protected:
  schemas: []                                       # List of protected schemes. For example: ["public", "personal"]
  tables: []                                        # List of protected tables. For example: ["public.participant", "personal.addresses"]
  columns: []

pipeline:
  file_transfer:
    type: k8s
    namespace: prod
    image: ubuntu:22.04
    command: "sleep 3600"    # timeout
    pod_prefix: "unison-file-transfer"
    base_dir: "/data/nextflow/pipelines/dev"
    volumes:
      volume_name: "/data/nextflow"
    labels:
      unison: 'yes'
      type: '{pod_prefix}'
      run_id: '{run_id}'
      last_connect: '{last_connect}'
      agent_id: '{agent_id}'

  executor:
    type: k8s
    namespace: prod
    work_dir: "/data/nextflow/pipelines/dev"
    pod_prefix: "unison-dev-worker"
    image: '058264135461.dkr.ecr.eu-central-1.amazonaws.com/main:nextflow-dev-latest'
    volumes:
      volume_name: "/data/nextflow"
    labels:
      type: '{pod_prefix}'
      run_id: '{run_id}'
      instance: '{instance}'
      last_connect: '{last_connect}'
      agent_id: '{agent_id}'

threads:
  queues:
    cohort:
      threads_max_count: 10
      timeout: 1800
    general:
      threads_max_count: 10
      timeout: 1800